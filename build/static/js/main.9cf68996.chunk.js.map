{"version":3,"sources":["components/Header.js","components/Persons.js","components/Input.js","components/Form.js","components/Filter.js","services/persons.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["Header","text","n","Persons","persons","filtered","isFilter","deletePerson","bText","map","person","key","name","number","onClick","id","Input","props","value","onChange","Form","onSubmit","newName","onNameChange","num","newNum","onNumChange","type","Filter","newFilter","onFilterChange","baseUrl","axios","get","then","response","data","newObject","post","put","delete","Notification","message","className","App","useState","setPersons","setFiltered","setNewName","setNewNum","setNewFilter","setMessage","messageType","setMessageType","useEffect","personServices","filterIsSet","length","filterHandling","filtered_","toLowerCase","includes","push","event","target","preventDefault","isInList","personToBeUpdate","find","e","updatedPerson","window","confirm","returnedPerson","setTimeout","catch","error","personsFromServer","concat","isDelete","filter","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9cf68996.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Header = ({ text, n }) => {\n  switch (n) {\n    case \"1\":\n      return <h1>{text}</h1>;\n    case \"2\":\n      return <h2>{text}</h2>;\n    case \"3\":\n      return <h3>{text}</h3>;\n    default:\n      return <h2>{text}</h2>;\n  }\n};\n\nexport default Header;\n","import React from \"react\";\nconst Persons = ({ persons, filtered, isFilter, deletePerson, bText }) => {\n  const filteredPersons = () =>\n    filtered.map(person => (\n      <p key={person.name}>\n        {person.name} {person.number}\n        <button onClick={() => deletePerson(person.id)}>{bText}</button>\n      </p>\n    ));\n\n  const names = () =>\n    persons.map(person => (\n      <p key={person.name}>\n        {person.name} {person.number}\n        <button onClick={() => deletePerson(person.id)}>{bText}</button>\n      </p>\n    ));\n\n  return <div>{isFilter === false ? names() : filteredPersons()}</div>;\n};\n\nexport default Persons;\n","import React from \"react\";\n\nconst Input = props => {\n  return (\n    <div>\n      {props.text}\n      <input value={props.value} onChange={props.onChange} />\n    </div>\n  );\n};\n\nexport default Input;\n","import React from \"react\";\nimport Input from \"./Input\";\n\nconst Form = props => {\n  return (\n    <form onSubmit={props.onSubmit}>\n      <div>\n        <Input\n          text={props.name}\n          value={props.newName}\n          onChange={props.onNameChange}\n        />\n        <Input\n          text={props.num}\n          value={props.newNum}\n          onChange={props.onNumChange}\n        />\n      </div>\n      <div>\n        <button type=\"submit\">{props.bText}</button>\n      </div>\n    </form>\n  );\n};\nexport default Form;\n","import React from \"react\";\nimport Input from \"./Input\";\n\nconst Filter = props => (\n  <Input\n    text={props.name}\n    value={props.newFilter}\n    onChange={props.onFilterChange}\n  />\n);\n\nexport default Filter;\n","import axios from \"axios\";\n//const baseUrl = \"https://infinite-plateau-29505.herokuapp.com/api/persons\";\n//const baseUrl = \"http://localhost:3001/api/persons\";\nconst baseUrl = \"/api/persons\";\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  return request.then(response => response.data);\n};\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject);\n  return request.then(response => response.data);\n};\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then(response => response.data);\n};\n\nconst deletePerson = id => {\n  axios.delete(`${baseUrl}/${id}`);\n};\n\nexport default { getAll, create, update, deletePerson };\n","import React from \"react\";\n\nconst Notification = ({ message, type }) => {\n  if (message === null) {\n    return null;\n  }\n  if (type === \"error\") {\n    return <div className=\"error\">{message}</div>;\n  } else if (type === \"notification\") {\n    return <div className=\"notification\">{message}</div>;\n  }\n};\nexport default Notification;\n","import React, { useState, useEffect } from \"react\";\nimport Header from \"./components/Header\";\nimport Persons from \"./components/Persons\";\nimport Form from \"./components/Form\";\nimport Filter from \"./components/Filter\";\nimport personServices from \"./services/persons\";\nimport Notification from \"./components/Notification\";\nimport \"./index.css\";\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [filtered, setFiltered] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNum, setNewNum] = useState(\"\");\n  const [newFilter, setNewFilter] = useState(\"\");\n  const [message, setMessage] = useState(null);\n  const [messageType, setMessageType] = useState(\"error\");\n\n  useEffect(() => {\n    personServices.getAll().then(persons => {\n      setPersons(persons);\n    });\n  }, []);\n\n  const filterIsSet = newFilter.length > 0 ? true : false;\n\n  const handleFilterChange = event => {\n    setNewFilter(event.target.value);\n    filterHandling(event.target.value);\n  };\n\n  const handleNameChange = event => {\n    setNewName(event.target.value);\n  };\n\n  const handleNumChange = event => {\n    setNewNum(event.target.value);\n  };\n\n  const deletePerson = id => {\n    if (\n      window.confirm(\"Delete \" + persons.find(person => person.id === id).name)\n    ) {\n      personServices.deletePerson(id);\n      setPersons(persons.filter(e => e.id !== id));\n    }\n  };\n\n  const isInList = newName => {\n    for (const person of persons) {\n      if (person.name === newName) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  const filterHandling = newFilter => {\n    const filtered_ = [];\n    for (const person of persons) {\n      if (person.name.toLowerCase().includes(newFilter.toLowerCase())) {\n        filtered_.push(person);\n      }\n    }\n    setFiltered(filtered_);\n  };\n\n  const handleNewPerson = event => {\n    event.preventDefault();\n\n    if (isInList(newName)) {\n      const personToBeUpdate = persons.find(e => e.name === newName);\n      const updatedPerson = { ...personToBeUpdate, number: newNum };\n      const update = window.confirm(\n        \"Do you want to update \" + newName + \"'s number?\"\n      );\n\n      if (update === true) {\n        personServices\n          .update(personToBeUpdate.id, updatedPerson)\n          .then(returnedPerson => {\n            setPersons(\n              persons.map(person =>\n                person.id !== personToBeUpdate.id ? person : returnedPerson\n              )\n            );\n            setMessage(`${newName}'s number updated `);\n            setMessageType(\"notification\");\n            setTimeout(() => {\n              setMessage(null);\n            }, 5000);\n          })\n          .catch(error => {\n            setMessage(\n              `Person with the name \"${newName}\" was already deleted.`\n            );\n            setMessageType(\"error\");\n            setTimeout(() => {\n              setMessage(null);\n            }, 5000);\n            setNewName(\"\");\n            setNewNum(\"\");\n          });\n        setNewName(\"\");\n        setNewNum(\"\");\n      }\n    } else {\n      const newPerson_ = { name: newName, number: newNum };\n\n      personServices.create(newPerson_).then(personsFromServer => {\n        setPersons(persons.concat(personsFromServer));\n        setNewName(\"\");\n        setNewNum(\"\");\n        setMessage(`Person ${newName} added to the phonebook`);\n        setMessageType(\"notification\");\n        setTimeout(() => {\n          setMessage(null);\n        }, 5000);\n      });\n    }\n  };\n\n  return (\n    <div id=\"main\">\n      <Notification message={message} type={messageType} />\n      <Header text=\"Phonebook\" n=\"2\" />\n      <Filter\n        newFilter={newFilter}\n        onFilterChange={handleFilterChange}\n        name=\"filter shown with \"\n      />\n      <Header text=\"Add a new\" n=\"3\" />\n      <Form\n        newName={newName}\n        newNum={newNum}\n        onNameChange={handleNameChange}\n        onNumChange={handleNumChange}\n        onSubmit={handleNewPerson}\n        name=\"Name:\"\n        num=\"Number:\"\n        bText=\"add\"\n      />\n      <Header text=\"Numbers\" n=\"3\" />\n      <Persons\n        persons={persons}\n        filtered={filtered}\n        isFilter={filterIsSet}\n        bText=\"delete\"\n        isDelete={true}\n        deletePerson={deletePerson}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}